# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

import os
import sys
import subprocess

from waflib import Options
from waflib.Errors import WafError

#def options(opt):
#    pass

def configure(conf):
    conf.env['ENABLE_ZMQ'] = conf.check(mandatory=False, lib='zmq', define_name='HAVE_ZMQ', uselib='ZMQ')
    conf.env['ENABLE_PROTOBUF'] = conf.check(mandatory=False, lib='protobuf', define_name='HAVE_PROTOBUF', uselib='PROTOBUF')

    # check if protoc is installed
    conf.env['ENABLE_PROTOC'] = False
    try:
        output = subprocess.check_output(['protoc', '--version']).decode("utf-8")
        if "libprotoc" in output:
            conf.env['ENABLE_PROTOC'] = True
    except Exception as e:
        pass

    if not conf.env['ENABLE_ZMQ'] or not conf.env['ENABLE_PROTOBUF'] or not conf.env['ENABLE_PROTOC']:
        conf.env['MODULES_NOT_BUILT'].append('opengym')
        return

    conf.env.append_value("LINKFLAGS", ["-lzmq", "-lprotobuf"])
    conf.env.append_value("LIB", ["zmq", "protobuf"])

    # build protobuff messages
    try:
        print("Build OpenGym Protobuf messages")
        pbSrcDir = "./src/opengym/model/"
        rc = subprocess.call("protoc -I="+pbSrcDir+" --cpp_out="+pbSrcDir+" "+pbSrcDir+"messages.proto", shell=True)
        rc = subprocess.call("protoc -I="+pbSrcDir+" --python_out="+pbSrcDir+"ns3gym/ns3gym/ "+pbSrcDir+"messages.proto", shell=True)
    except Exception as e:
        conf.env['MODULES_NOT_BUILT'].append('opengym')

def build(bld):
    # Don't do anything for this module if click should not be built.
    if 'opengym' in bld.env['MODULES_NOT_BUILT']:
        return

    module = bld.create_ns3_module('opengym', ['core'])
    module.source = [
        'model/opengym_interface.cc',
        'model/messages.pb.cc',
        'model/container.cc',
        'model/spaces.cc',
        'model/opengym_env.cc',
        'helper/opengym-helper.cc',
        ]

    module_test = bld.create_ns3_module_test_library('opengym')
    module_test.source = [
        'test/opengym-test-suite.cc',
        ]

    headers = bld(features='ns3header')
    headers.module = 'opengym'
    headers.source = [
        'model/opengym_interface.h',
        'model/messages.pb.h',
        'model/container.h',
        'model/spaces.h',
        'model/opengym_env.h',
        'helper/opengym-helper.h',
        ]

    if bld.env['ENABLE_ZMQ']:
        module.use.extend(['lzmq'])
        module.use.extend(['lprotobuf'])

    if bld.env.ENABLE_EXAMPLES:
        bld.recurse('examples')

    # bld.ns3_python_bindings()

